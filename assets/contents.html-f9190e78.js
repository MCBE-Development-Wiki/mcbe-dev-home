import{_ as r,M as a,p as d,q as h,N as n,W as l,R as s,t as e,S as o}from"./framework-8c007374.js";const p={},m=o('<h1 id="内容文件" tabindex="-1"><a class="header-anchor" href="#内容文件" aria-hidden="true">#</a> 内容文件</h1><p><a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/4.0/"><img alt="Creative Commons License" style="border-width:0;" src="https://mirrors.creativecommons.org/presskit/buttons/80x15/svg/by-nc-sa.svg"></a></p><p><strong>内容文件</strong>（<strong>Contents File</strong>）是提供了当前附加包的内容的列表的文件。附加包的<strong>内容</strong>（<strong>Content</strong>）指附加包内所有文件与文件夹的总和。该文件位于附加包的根目录中，和清单文件同级目录下，文件名硬编码为<code>contents.json</code>。该文件不是一个附加包所必须的。</p><div class="treeview"><ul><li><span class="sprite" style="background-image:url(https://wiki.mcbe-dev.net/w/images/9/92/FileCSS.png?format=original);background-position:-112px -128px;background-size:128px auto;height:16px;width:16px;"></span> <code>pack</code> 附加包<ul><li><span class="sprite" style="background-image:url(https://wiki.mcbe-dev.net/w/images/9/92/FileCSS.png?format=original);background-position:-0px -80px;background-size:128px auto;height:16px;width:16px;"></span> <code>contents.json</code></li></ul></li></ul></div><h2 id="版本化与模式" tabindex="-1"><a class="header-anchor" href="#版本化与模式" aria-hidden="true">#</a> 版本化与模式</h2><p>内容文件的版本化由文件中的<code>version</code>字段控制，目前该字段理论允许<code>0</code>和<code>1</code>，实际上接受任何值。不存在该字段时默认按照为<code>0</code>处理。不同格式版本的内容文件格式的模式分别如下：</p>',6),u=s("div",{class:"language-schema line-numbers-mode","data-ext":"schema"},[s("pre",{class:"language-schema"},[s("code",null,[s("span",{class:"hljs-strong"},"object"),e(`
{
    `),s("span",{class:"hljs-strong"},"int"),e(),s("span",{class:"hljs-string"},'"version"'),e(),s("span",{class:"hljs-comment"},"// 该文件的格式版本，此处应为`1`"),e(`
    `),s("span",{class:"hljs-strong"},"array"),e(),s("span",{class:"hljs-string"},'"content"'),e(`
    {
        `),s("span",{class:"hljs-strong"},"object"),e(),s("span",{class:"hljs-string"},'"<any array element>"'),e(`
        {
            `),s("span",{class:"hljs-strong"},"string"),e(),s("span",{class:"hljs-string"},'"path"'),e("<"),s("span",{class:"hljs-regexp"},"/.*?:(?:[^\\n|\\r|/|\\\\]+[/\\\\]?)*/"),e(`>
            `),s("span",{class:"hljs-strong"},"string"),e(),s("span",{class:"hljs-string"},'"key"'),e("["),s("span",{class:"hljs-number"},"32"),e("] : "),s("span",{class:"hljs-literal"},"opt"),e(),s("span",{class:"hljs-comment"},"// AES256 CFB8 NoPadding秘钥"),e(`
        }
    }
}
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),g=s("div",{class:"language-schema line-numbers-mode","data-ext":"schema"},[s("pre",{class:"language-schema"},[s("code",null,[s("span",{class:"hljs-strong"},"object"),e(`
{
    `),s("span",{class:"hljs-strong"},"int"),e(),s("span",{class:"hljs-string"},'"version"'),e(" : "),s("span",{class:"hljs-literal"},"opt"),e(),s("span",{class:"hljs-comment"},"// 该文件的格式版本，此处应为`0`"),e(`
    `),s("span",{class:"hljs-strong"},"array"),e(),s("span",{class:"hljs-string"},'"content"'),e(" : "),s("span",{class:"hljs-literal"},"opt"),e(`
    {
        `),s("span",{class:"hljs-strong"},"object"),e(),s("span",{class:"hljs-string"},'"<any array element>"'),e(`
        {
            `),s("span",{class:"hljs-strong"},"string"),e(),s("span",{class:"hljs-string"},'"path"'),e("<"),s("span",{class:"hljs-regexp"},"/.*?:.*/"),e(`>
            `),s("span",{class:"hljs-strong"},"string"),e(),s("span",{class:"hljs-string"},'"key"'),e("["),s("span",{class:"hljs-number"},"32"),e("] : "),s("span",{class:"hljs-literal"},"opt"),e(),s("span",{class:"hljs-comment"},"// AES256 CFB8 NoPadding秘钥"),e(`
        }
    }
}
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),b=o('<h2 id="升级" tabindex="-1"><a class="header-anchor" href="#升级" aria-hidden="true">#</a> 升级</h2><p>当该文件的版本不为<code>1</code>时，该附加包被加入到游戏时、在已被加入到全局或当前世界的前提下游戏初始化或切回前台（仅资源包）时、被在资源栈中点击包验证按钮时将对该文件进行升级（本质上是只要触发了包验证，且清单文件验证无误，就会在验证完成清单后开启内容文件的验证，当检测到版本不为<code>1</code>时便会触发升级逻辑）。升级的具体流程是：先读取该文件内<code>content</code>下已填入的所有路径，然后扫描该附加包内所有文件，将真实存在在附加包内却不在该文件内列出的文件追加到该文件<code>content</code>数组末尾，并修正畸形的路径（这一操作被称为清理路径分隔符）。清理路径分隔符主要用于将一些不正确的路径组合替换为正确的，譬如将套有空文件夹的<code>//</code>组合替换为<code>/</code>，或将反斜杠的<code>\\\\</code>（必须转义才能被读取为反斜杠）替换为正斜杠<code>/</code>。最后将<code>version</code>字段设置为<code>1</code>。需要注意的是：</p><ul><li>升级逻辑不会移除本来存在于原始的该文件中但是无效的路径。</li><li>升级逻辑只会将不存在于该内容文件中的该附加包内的<strong>文件</strong>的路径写入，不会写入任何文件夹路径。</li><li>升级逻辑触发的前提是该内容文件的内容是一个对象且<code>version</code>不为<code>1</code>。这意味着如果该文件本来不是一个JSON对象，那么不会触发升级逻辑。</li></ul><div class="custom-container tip"><p class="custom-container-title">自动生成</p><p>利用升级的功能，我们可以使游戏自动生成一个包含当前包内所有文件的路径的内容文件。由于不存在<code>version</code>字段时该字段默认读取为<code>0</code>，所以我们只需要在附加包的根目录新建一个<code>contents.json</code>，并将内容设置为最简单的JSON对象空对象<code>{}</code>即可。在下次打开游戏时游戏引擎便会自动为我们生成一个相对完整的内容文件。之所以说其实“相对”完整，是因为游戏引擎只会生成附加包内文件的路径，而不会生成文件夹的路径。不过这也已经足够了。</p></div><h2 id="密码" tabindex="-1"><a class="header-anchor" href="#密码" aria-hidden="true">#</a> 密码</h2><p>内容文件是加密包的索引文件，如果包内某些文件被加密，引擎会按照每个路径对应的<code>key</code>字段对每个文件进行解密后再进行读取。</p><h3 id="标头" tabindex="-1"><a class="header-anchor" href="#标头" aria-hidden="true">#</a> 标头</h3><p>市场包加密算法下的内容文件一般具有256个字节的标头，用于确定该内容文件的身份，保证其保密性。此时该内容文件是处于加密状态下的，引擎会在确认该标头后去掉该标头并对剩余部分进行解密以获取原始内容。</p><h2 id="外部链接" tabindex="-1"><a class="header-anchor" href="#外部链接" aria-hidden="true">#</a> 外部链接</h2>',9),v={href:"https://wiki.bedrock.dev/concepts/contents.html",target:"_blank",rel:"noopener noreferrer"};function j(_,x){const c=a("CodeGroupItem"),t=a("CodeGroup"),i=a("ExternalLinkIcon");return d(),h("div",null,[m,n(t,null,{default:l(()=>[n(c,{title:"1"},{default:l(()=>[u]),_:1}),n(c,{title:"0"},{default:l(()=>[g]),_:1})]),_:1}),b,s("ul",null,[s("li",null,[s("a",v,[e("contents.json"),n(i)]),e(" - Bedrock Wiki")])])])}const f=r(p,[["render",j],["__file","contents.html.vue"]]);export{f as default};
